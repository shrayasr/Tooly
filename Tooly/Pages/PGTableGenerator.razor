@page "/PGTableGenerator"
@using System.Text.RegularExpressions;
@using System.Text;
@using Tooly.Util;

<div class="row">
    <div class="col">
        <h1>PostgreSQL Table Generator</h1>
    </div>
</div>

<hr/>

<div class="row mt-2">
    <div class="col-6">
        <div class="form-floating">
            <textarea @bind="definitionText" style="height: 500px" class="form-control font-monospace" spellcheck="false"></textarea>
            <label>Definition</label>
        </div>
        <div class="mt-2">
            <details>
                <summary>Example</summary>
                <pre>
#customers
bigint tenantid
bigserial id
text name
$PK id
!rls tenantid = get_tenant_id()

#customeraddresses
bigint tenantid
bigserial id
bigint customerid
text address
$PK id
$FK customerid customers,id
!rls tenantid = get_tenant_id()
                </pre>
            </details>
        </div>
        <div class="d-grid mt-2">
            <button @onclick="Process" type="button" class="btn btn-lg btn-primary">Generate</button>
        </div>
    </div>
    <div class="col-6">
        <table class="table table-bordered">
            <tbody>
                <tr>
                    <th>Table definition</th>
                    <td><code>#&lt;table name&gt;</code></td>
                </tr>
                <tr>
                    <th>Column definition</th>
                    <td>
                        <code>&lt;data type&gt; &lt;column name&gt; [length]</code>

                        <hr />

                        Where <code>data type</code> can be any one of:
                        <ul class="font-monospace">
                            <li>serial</li>
                            <li>bigserial</li>
                            <li>int</li>
                            <li>bigint</li>
                            <li>string</li>
                            <li>bool</li>
                            <li>timestamp/tz</li>
                            <li>timestampz/tzz</li>
                            <li>float</li>
                            <li>text</li>
                            <li>jsonb</li>
                            <li>blob</li>
                        </ul>
                        
                    </td>
                </tr>
                <tr>
                    <th>Primary Key</th>
                    <td>
                        <code>$PK &lt;column name&gt;</code>
                    </td>
                </tr>
                <tr>
                    <th>Foreign Key</th>
                    <td>
                        <code>$FK &lt;column name&gt; &lt;target table&gt;,&lt;target column name&gt;</code>
                    </td>
                </tr>
                <tr>
                    <th>Unique Key</th>
                    <td><code>$UK &lt;column names&gt;</code></td>
                </tr>
                <tr>
                    <th>RLS policy</th>
                    <td><code>!rls &lt;using expression&gt;</code></td>
                </tr>
            </tbody>
        </table>
        <div class="alert alert-info">
            <h4>Notes</h4>
            <ul>
                <li>Separate multiple definitions with an empty line</li>
                <li><code>length</code> is mandatory if the <code>data type</code> is <code>string or float</code></li>
            </ul>
        </div>
    </div>
</div>

<div class="row mt-2">
    <div class="col">
        <h2>Outputs</h2>
    </div>
</div>

<div class="row mt-2">
    <div class="col-6">
        <div class="form-floating">
            <textarea @ref="outputTextarea" style="height: 500px" class="form-control font-monospace" spellcheck="false">@sqlStatements</textarea>
            <label>Table definition</label>
        </div>
    </div>
    <div class="col-6">
        <div class="form-floating">
            <textarea style="height: 500px" class="form-control font-monospace" spellcheck="false">@cSharpStatements</textarea>
            <label>C# Definition</label>
        </div>
    </div>
</div>

<br/>
<br/>
<br/>
<br/>

@code
{
    private string? definitionText;

    private string? sqlStatements;
    private string? cSharpStatements;

    private ElementReference outputTextarea;

    private void Process()
    {
        if (definitionText == null) return;

        cSharpStatements = "// Because these are generated, the casing will be wrong in the class name and field names. Please double check it.\n";
        cSharpStatements += "// Delete these comments when you bring this code into your project\n\n";

        sqlStatements = "";

        var tables = GetTableDefinitionStrings(definitionText);

        foreach (var table in tables)
        {
            var tableDefinitionStrings = ParseTable(table);
            var ddl = ConvertToPGSQL(tableDefinitionStrings);
            var cs = ConvertToCSharp(tableDefinitionStrings);

            sqlStatements += ddl;
            sqlStatements += "\n\n";

            cSharpStatements += cs;
        }

        outputTextarea.FocusAsync();
    }

    string ConvertToCSharp(TableDefinitionStrings def)
    {
        var code = new StringBuilder();

        var className = def.TableNameLine?.TrimStart('#').Capitalize();

        if (string.IsNullOrEmpty(className))
        {
            throw new ArgumentNullException(className);
        }

        code.AppendLine();
        code.AppendLine("[DAO]");
        code.AppendLine("[Validatable]");
        code.AppendLine($"public partial class {className}");
        code.AppendLine("{");

        code.AppendJoin("\n", def.ColumnLines.Select(c => $"\t{ConvertToPropertyDefinition(c)}"));

        code.AppendLine();
        code.AppendLine("}");

        return code.ToString();

        string ConvertToPropertyDefinition(string columnLine)
        {
            var source = Regex.Replace(
                                columnLine.Trim(),
                                @"\s+", " ");

            var sourceParts = source.Split(' ');
            var type = sourceParts.ElementAtOrDefault(0)?.ToLowerInvariant();
            var name = sourceParts.ElementAtOrDefault(1)?.ToLowerInvariant();

            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentNullException(name);
            }

            if (string.IsNullOrEmpty(type))
            {
                throw new ArgumentNullException(type);
            }

            var nullString = name.EndsWith("?")
                                ? "?"
                                : "";

            name = name.TrimEnd('?');

            var csType = type switch
            {
                "serial" => "int",
                "bigserial" => "long",
                "int" => "int",
                "bigint" => "long",
                "bool" => "bool",
                "string" => $"string",

                "tz" or
                "timestamp" => "LocalDateTime",

                "tzz" or
                "timestampz" => "Instant",

                "float" => $"decimal",
                "text" => "string",

                "jsonb" => "JsonbString",
                "blob" => "byte[]",

                _ => throw new InvalidOperationException($"That column type '{type}' is not implemented yet")
            };

            return $"{csType} {name.Capitalize()} {{ get; set; }}";
        }
    }


    string ConvertToPGSQL(TableDefinitionStrings def)
    {
        var ddl = new StringBuilder();

        var tableName = def.TableNameLine?.TrimStart('#').ToLowerInvariant();

        ddl.AppendLine($"create table {tableName} (");

        var tableBodyLines = new List<string>();

        var columnLines = def.ColumnLines.Select(c => $"\t{ConvertToPGColumn(c)}");
        var constraintLines = def.ConstraintLines.Select(s => $"\t{ConvertToPGColumnConstraint(s)}");

        ddl.AppendJoin(",\n", columnLines);
        ddl.AppendLine(",");

        ddl.AppendLine();

        ddl.AppendJoin(",\n", constraintLines);

        ddl.AppendLine(string.Join(",\n", tableBodyLines));
        ddl.AppendLine(");");

        if (def.HasRLS)
        {
            ddl.AppendLine();
            ddl.AppendLine(GetRLSPolicy(def.RLSLine));
        }

        return ddl.ToString();

        string GetRLSPolicy(string? rlsLine)
        {
            var rlsParts = rlsLine?.Split(" ", 2).Select(l => l.Trim());
            var usingExpression = rlsParts?.ElementAtOrDefault(1)?.ToLowerInvariant();

            if (string.IsNullOrEmpty(usingExpression))
            {
                throw new ArgumentNullException(usingExpression);
            }

            var rlsPolicy = $"ALTER TABLE {tableName} ENABLE ROW LEVEL SECURITY;\n";
            rlsPolicy += $"CREATE POLICY {tableName}_isolation_policy ON {tableName} USING ({usingExpression});";

            return rlsPolicy;
        }

        string ConvertToPGColumnConstraint(string constraintLine)
        {
            var constraint = Regex.Replace(
                                    constraintLine.Trim(),
                                    @"\s+", " ");

            var constraintParts = constraint.Split(" ");
            var type = constraintParts.ElementAtOrDefault(0)?.ToLowerInvariant();
            var arg1 = constraintParts.ElementAtOrDefault(1)?.ToLowerInvariant();
            var arg2 = constraintParts.ElementAtOrDefault(2)?.ToLowerInvariant();

            if (string.IsNullOrEmpty(arg1))
            {
                throw new ArgumentNullException(arg1);
            }

            string constraintName;
            string constraintType;
            string constraintArgs;

            switch (type)
            {
                case "$pk":
                    constraintName = $"{tableName}_pkey";
                    constraintType = "PRIMARY KEY";
                    constraintArgs = $"({arg1})";
                    break;

                case "$fk":
                    var arg2Parts = arg2?.Split(",").Select(p => p.Trim());
                    var refTableName = arg2Parts?.ElementAtOrDefault(0)?.ToLowerInvariant();
                    var refTableColumnName = arg2Parts?.ElementAtOrDefault(1)?.ToLowerInvariant();

                    if (string.IsNullOrEmpty(refTableName) || string.IsNullOrEmpty(refTableColumnName))
                    {
                        throw new ArgumentNullException(arg2);
                    }

                    constraintName = $"{tableName}_{refTableName}_fkey";
                    constraintType = "FOREIGN KEY";
                    constraintArgs = $"{arg1} REFERENCES {refTableName} ({refTableColumnName})";
                    break;

                case "$uk":
                    var ukColumnsForKey = string.Join(
                                                    "_",
                                                    arg1
                                                        .Split(",")
                                                        .Select(a => a.Trim().ToLowerInvariant())
                                            );

                    constraintName = $"{tableName}_{ukColumnsForKey}_ukey";
                    constraintType = "UNIQUE KEY";
                    constraintArgs = $"({arg1})";
                    break;

                default:
                    throw new NotImplementedException($"That constraint '{type}' is not implemented yet");
            }

            return $"CONSTRAINT {constraintName} {constraintType} {constraintArgs}";
        }

        string ConvertToPGColumn(string sourceLine)
        {
            var source = Regex.Replace(
                                sourceLine.Trim(),
                                @"\s+", " ");

            var sourceParts = source.Split(' ');
            var type = sourceParts.ElementAtOrDefault(0)?.ToLowerInvariant();
            var name = sourceParts.ElementAtOrDefault(1)?.ToLowerInvariant();
            var length = sourceParts.ElementAtOrDefault(2); // optional

            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentNullException(name);
            }

            if (string.IsNullOrEmpty(type))
            {
                throw new ArgumentNullException(type);
            }

            var nullString = name.EndsWith("?")
                                ? "NULL"
                                : "NOT NULL";

            name = name.TrimEnd('?');

            var typeAndLengthString = type switch
            {
                "serial" => "serial",
                "bigserial" => "bigserial",
                "int" => "integer",
                "bigint" => "bigint",
                "bool" => "bool",
                "string" => $"character varying ({length})",

                "tz" or
                "timestamp" => "timestamp without time zone",

                "tzz" or
                "timestampz" => "timestamp with time zone",

                "float" => $"decimal ({length})",
                "text" => "text",

                "jsonb" => "jsonb",
                "blob" => "bytea",

                _ => throw new InvalidOperationException($"That column type '{type}' is not implemented yet")
            };

            return $"{name} {typeAndLengthString} {nullString}";
        }
    }


    TableDefinitionStrings ParseTable(string table)
    {
        var lines = table.Split('\n').Select(l => l.Trim());

        var tableNameLine = lines.Where(l => l.StartsWith('#')).FirstOrDefault();
        var rlsLine = lines.Where(l => l.StartsWith("!")).FirstOrDefault();
        var constraintLines = lines.Where(l => l.StartsWith('$'));
        var columnLines = lines.Where(l => !l.StartsWith('#') && !l.StartsWith('$') && !l.StartsWith("!"));

        return new TableDefinitionStrings(
                    table,
                    tableNameLine,
                    constraintLines,
                    columnLines,
                    rlsLine);
    }


    List<string> GetTableDefinitionStrings(string tableDefinition)
    {
        return Regex.Split(tableDefinition, @"\n\s*\n").ToList();
    }

    public record TableDefinitionStrings(
        string source,
        string? TableNameLine,
        IEnumerable<string> ConstraintLines,
        IEnumerable<string> ColumnLines,
        string? RLSLine
    )
    {
        public bool HasRLS => !string.IsNullOrEmpty(RLSLine);
    }
}
